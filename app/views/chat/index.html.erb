<% title 'Chat', @product.name %>
<% activate_nav! :chat %>
<% provide :body_class, 'chat-wrapper' %>
<% @sheet_style = 'width: 700px;' %>
<% @disable_footer = true %>

<div class="navbar-fixed-top">
  <%= render 'shared/navbar' %>
</div>

<div class="modal fade"
     id="create-task"
     tabindex="-1"
     role="dialog"
     aria-labelledby="createTask"
     aria-hidden="true">
</div>

<div class="js-members" style="width: 230px; position: fixed; margin-left: 670px;"></div>

<div class="js-scroll-container">
  <div class="chat js-chat">
    <center>
      <a class="btn btn-default btn-block btn-sm js-chat-load-more" href="<%= product_chat_path(@product, format: 'json') %>" style="margin-top: 36px;">Load more</a>
      <br>
    </center>

    <div class="timeline chat-timeline js-activity-stream"></div>
  </div>
</div>
<div class="chat-actions js-chat-actions" style="margin-bottom:-34px">
  <%= render 'discussions/chat_box' %>
</div>


<script>
  app.product = new Product(<%= json @product, scope: current_user %>);
  app.wip = new Wip(<%= json @product.main_thread, scope: current_user %>);
</script>

<script>
  $(document).ready(function() {

    var activityStream = new ActivityStream(<%=
      json @activity_stream.map {|a, _|
        ActivitySerializer.new(a, scope: current_user)
      }
    %>);
    activityStream.url = '<%= product_wip_comments_path(@product, @product.main_thread) %>';
    activityStream.product = app.product;

    var activityStreamView = new ActivityStreamView({
      el: $('.js-activity-stream'),
      collection: activityStream,
      subjectId: app.wip.id,
      tipsPath: "<%= product_tips_path(@product) %>"
    });

    // Initialize pusher
    var pusher = new Pusher($('meta[name=pusher-key]').attr('content'), {
      authEndpoint: <%= webhooks_pusher_path.to_json.html_safe %>
    });

    pusher.connection.bind('connected', function() {
      activityStream.listenForRemote(pusher, pusher.connection);

      var presenceChannel = pusher.subscribe('presence-' + activityStream.channelName())
      var permanentWatchers = <%= @recently_active.each_with_object({}) {|w, memo| memo[w.id] = UserSerializer.new(w) }.to_json.html_safe %>

      $('.js-members').each(function() {
        var component = React.renderComponent(
          MembersView({
            url: '<%= product_watchers_path(@product, format: :json) %>',
            channel: presenceChannel
          }),
          this
        )

        component.setState({
          members: permanentWatchers
        })
      })

      presenceChannel.bind(
        'pusher:member_added',
        function memberJoined(member) {
          if (permanentWatchers.hasOwnProperty(member.id)) {
            return;
          }

          var activity = new Activity({
            id: member.id + rand(10000),
            actor: member.info,
            // TODO: change 'type' to 'verb'
            type: 'activities/join'
          });

          activityStream.add(activity);
        }
      );
    });

    var chatView = new ChatView({
      el: $('.js-chat'),
      collection: activityStream,
      scrollContainer: $('.js-scroll-container'),
      scrollPadding: 216
    });

    var chatInput = new ChatInput({
      el: $('.js-chat-actions')
    })

    window.activityStream = activityStream;
    window.activityStreamView = activityStreamView;
    window.chatView = chatView;

    activityStreamView.render();
    chatView.render();
    chatView.scrollToLatestActivity();
    $(window).load(function() {
      delay(1, chatView.scrollToLatestActivity);
    });
  });
</script>

<!-- Analytics -->
<script>
  analytics.track('product.chat.viewed', <%== ProductSerializer.new(@product, scope: current_user).to_json %>)
</script>
